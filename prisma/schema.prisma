// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  portfolio     Portfolio[]
  artists       Artist[]  // Relation to artists created by the user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  id          String      @id @default(cuid())
  userId      String      // Link to the user who created the artist
  name        String
  bio         String      @db.Text
  image       String      // URL to artist image
  genre       String
  socialLinks Json        // Store social media links as JSON
  tokenSupply Int         @default(1000)
  tokensSold  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio   Portfolio[]
  trades      Trade[]

  @@index([userId])
  @@index([genre])
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String
  artistId  String
  amount    Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, artistId])
}

model PriceHistory {
  id        String   @id @default(cuid())
  artistId  String
  price     Float
  timestamp DateTime @default(now())
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model Trade {
  id        String   @id @default(cuid())
  artistId  String
  amount    Float
  price     Float
  type      String   // 'BUY' or 'SELL'
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ArtistMetrics {
  id        String            @id @default(cuid())
  artistId  String            @unique
  artist    Artist            @relation(fields: [artistId], references: [id])
  social    SocialMetrics?
  financial FinancialMetrics?
  technical TechnicalMetrics?
}

model SocialMetrics {
  id                  String        @id @default(cuid())
  metricsId           String        @unique
  metrics             ArtistMetrics @relation(fields: [metricsId], references: [id])
  monthlyListeners    Int
  spotifyFollowers    Int
  topTracks           Json // Array of { name: string, streams: string }
  instagramFollowers  Int
  instagramEngagement Float
  instagramPosts30d   Int
  twitterFollowers    Int
  twitterEngagement   Float
  twitterPosts30d     Int
}

model FinancialMetrics {
  id               String        @id @default(cuid())
  metricsId        String        @unique
  metrics          ArtistMetrics @relation(fields: [metricsId], references: [id])
  revenueStreams   Json // Array of { source: string, percentage: number }
  quarterlyRevenue Json // Array of { quarter: string, amount: number }
}

model TechnicalMetrics {
  id                String        @id @default(cuid())
  metricsId         String        @unique
  metrics           ArtistMetrics @relation(fields: [metricsId], references: [id])
  rsi               Float
  macd              Float
  movingAverage50d  Float
  movingAverage200d Float
  sentimentOverall  String
  sentimentScore    Int
  newsCount30d      Int
  socialMentions30d Int
}

model Order {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  artistId        String
  artist          Artist      @relation(fields: [artistId], references: [id])
  type            OrderType
  orderType       OrderType2  @default(LIMIT)
  amount          Float
  price           Float
  status          OrderStatus @default(PENDING)
  buyTrades       Trade[]     @relation("BuyOrder")
  sellTrades      Trade[]     @relation("SellOrder")
  filledAmount    Float       @default(0)
  remainingAmount Float       @default(0)
  expiresAt       DateTime?
}

model ArtistValuation {
  id        String   @id @default(cuid())
  artistId  String
  value     Float
  metrics   Json
  timestamp DateTime @default(now())
  artist    Artist   @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@index([timestamp])
}

model TokenTransaction {
  id            String   @id @default(cuid())
  artistId      String
  userId        String
  amount        Int
  priceAtPurchase Float
  timestamp     DateTime @default(now())
  artist        Artist   @relation(fields: [artistId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([artistId])
  @@index([userId])
}

enum OrderType {
  BUY
  SELL
}

enum OrderType2 {
  MARKET
  LIMIT
}

enum OrderStatus {
  PENDING
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  EXPIRED
}
